AC_PREREQ([2.60])
AC_INIT
AC_CONFIG_SRCDIR([configure.in])
progName="nero2d"
progVersion="2.0.0"

AC_CONFIG_HEADERS([config.h])
AC_CONFIG_MACRO_DIR([m4])
AM_INIT_AUTOMAKE($progName, $progVersion)

dnl Check for a fortran 77 compiler
AC_PROG_F77
AC_PROG_F77_C_O
AC_F77_LIBRARY_LDFLAGS
AC_F77_DUMMY_MAIN
AC_F77_WRAPPERS

dnl Check for C++ compiler
AC_PROG_CXX
AC_PROG_CXXCPP
AC_LANG([C++])

dnl ===========================
dnl Enable the --with variables
dnl ===========================

AC_ARG_ENABLE(debug,
	[AS_HELP_STRING([--enable-debug],
	[Build debug version])],
	[enable_debug="yes"],
	[enable_debug="no"])

AC_ARG_ENABLE(mpi,
	[AS_HELP_STRING([--enable-mpi],
	[Enable MPI support for $(progName)])],
	[enable_mpi="yes"],
	[enable_mpi="no"])

AC_ARG_ENABLE(mpe,
	[AS_HELP_STRING([--enable-mpe],
	[Enable MPE logging support])],
	[enable_mpe="yes"],
	[enable_mpe="no"])

AC_ARG_ENABLE(blasfunc,
        [AS_HELP_STRING([--enable-blasfunc],
        [Enable function calls to the external BLAS library])],
        [enable_bf="yes"],
        [enable_bf="no"])

AC_ARG_WITH(fftw_dir,
	[AS_HELP_STRING([--with-fftw-dir@<:@DIR@:>@],
	[look for FFTW3 library in a directory, optionally specified by DIR])],
	[FFTWLIBPATH=-L"$withval"/lib; FFTWINCPATH=-I"$withval"/include],
	[FFTWLIBPATH=""; FFTWINCPATH=""])

dnl ====================================
dnl Check for the presence of sys/time.h
dnl ====================================

AC_CHECK_HEADER([sys/time.h],
        [AC_DEFINE([HAVE_TIMER],[],[Enable MPE logging support])],
        [AC_MSG_NOTICE([WARNING: Couldn't find LAPACK])])

dnl ==================================
dnl Check for the presence of the BLAS
dnl ==================================

sinclude(m4/acx_blas.m4)
sinclude(m4/acx_blas_f77_func.m4)
ACX_BLAS([],[AC_MSG_NOTICE([WARNING: Couldn't find BLAS])])

if test "x$enable_bf" = "xyes"; then
        ACX_BLAS_F77_FUNC
fi

AM_CONDITIONAL([COMPILE_BLAS],[test "x$acx_blas_ok" = "xno"])
AM_CONDITIONAL([COMPILE_ZDOTC],[test "x$acx_blas_ok" = "xyes" -a "x$enable_bf" = "xno"])

dnl ================================
dnl Check for the presence of LAPACK
dnl ================================

sinclude(m4/acx_lapack.m4)
ACX_LAPACK([],[AC_MSG_NOTICE([WARNING: Couldn't find LAPACK])])
AM_CONDITIONAL([COMPILE_LAPACK],[test "x$acx_lapack_ok" = "xno"])

dnl ============================================
dnl Check for the presence of MPI (if necessary)
dnl ============================================

sinclude(m4/acx_mpi.m4)
if test "$enable_mpi" = "$enableval"; then
	ACX_MPI([],[AC_MSG_ERROR([Couldn't find mpi for --enable-mpi])])
else
	MPICXX="$CXX"
        AC_SUBST(MPICXX)
fi

dnl ====================================
dnl Add the MPE libraries (if necessary)
dnl ====================================

if test "$enable_mpe" = "$enableval"; then
        AC_DEFINE([USE_MPE],[],[Enable MPE logging support])
        MPE_LIBS="-llmpe -lmpe"
        AC_SUBST(MPE_LIBS)
else
        MPE_LIBS=""
        AC_SUBST(MPE_LIBS)
fi

dnl ==============================
dnl Check for the presence of FFTW
dnl ==============================

CPPFLAGS="$CPPFLAGS $FFTWINCPATH"
AC_CHECK_HEADER([fftw3.h], ,
	[AC_MSG_ERROR([Cannot find the fftw3.h header.  See docs for info.])])

LDFLAGS="$LDFLAGS $FFTWLIBPATH"
old_libs="$LIBS"
AC_CHECK_LIB([fftw3],[fftw_free], ,
	[AC_MSG_ERROR([Need FFTW-3 library for $(progName).  See docs for info.])])
	FFTW_LIBS="-lfftw3"
LIBS="$old_libs"
AC_SUBST(FFTW_LIBS)

AM_PROG_LIBTOOL
AC_CONFIG_FILES([Makefile config/Makefile benchmark/Makefile doc/Makefile \
	src/zofpack/machcons/Makefile \
	src/zofpack/Makefile src/zofpack/amos/Makefile \
	src/zofpack/blas/Makefile src/zofpack/lapack/Makefile \
	src/zofpack/pim/Makefile examples/Makefile \
	examples/example1/Makefile examples/example2/Makefile \
	examples/frqsweep/Makefile src/Makefile \
	src/grafix/Makefile src/nexus/Makefile])
AC_OUTPUT

dnl ======================
dnl Print options overview
dnl ======================

AC_MSG_NOTICE([
***************************************************************
  $progName is now configured for $canonical_host_type

  Source directory:     $srcdir
  Installation prefix:  $prefix
  C++ compiler:         $MPICXX $XTRA_CXXFLAGS $WARN_CXXFLAGS $CXXFLAGS
  Fortran compiler:     $F77 $FFLAGS
  Fortran libraries:    $FLIBS
  BLAS libraries:       $BLAS_LIBS
  LAPACK libraries:     $LAPACK_LIBS
  FFTW libraries:       $FFTW_LIBS
  LIBS:                 $LIBS
  LDFLAGS:              $LDFLAGS

  Type "make" to build the program.
***************************************************************
])

# Print a warning about incompatible blas libries
if test "x$acx_blas_f77_func" = "xno"; then
AC_MSG_NOTICE([
***************************************************************
* WARNING: You have enabled the usage of BLAS functions calls *
* in your BLAS library.  However, I think that you BLAS       *
* library is compiled with a non-compatible Fortran compiler  *
* Should you encounter crashes during the iterative solving,  *
* please do not use the --enable-blasfunc option or use a     *
* different Fortran compiler, e.g. g77 <-> gfortran.          *
***************************************************************
])
fi

# Print a warning if the BLAS is not found
if test "x$acx_blas_ok" = "xno"; then
AC_MSG_NOTICE([
***************************************************************
* WARNING: Couldn't find the BLAS installed on your sytem.    *
* The program will be configured to compile BLAS itself,      *
* however, performance can be poor.  You have been warned!    *
***************************************************************
])
fi

# Print a warning if LAPACK is not found
if test "x$acx_lapack_ok" = "xno"; then
AC_MSG_NOTICE([
***************************************************************
* WARNING: Couldn't find LAPACK installed on your sytem.      *
* The program will be configured to compile LAPACK itself,    *
* however, performance can be poor.  You have been warned!    *
***************************************************************
])
fi
