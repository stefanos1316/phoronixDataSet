#!/bin/sh
export OMP_NUM_THREADS=1
cd `dirname $0`
printf "specialconvolve Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; r = np.arange(100*10000, dtype=np.uint32).reshape(1000,1000); from Python_specialconvolve import specialconvolve ; res = specialconvolve(r)" "res = specialconvolve(r)" 2>/dev/null || echo unsupported
printf "l2norm Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; N = 1000; x = np.random.rand(N,N); from Python_l2norm import l2norm ; res = l2norm(x)" "res = l2norm(x)" 2>/dev/null || echo unsupported
printf "local_maxima Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; shape = (5,4,3,2) ; x = np.arange(120, dtype=np.float64).reshape(*shape); from Python_local_maxima import local_maxima ; res = local_maxima(x)" "res = local_maxima(x)" 2>/dev/null || echo unsupported
printf "check_mask Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "n=1000 ; import numpy as np; np.random.seed(0); db = np.array(np.random.randint(2, size=(n, 4)), dtype=bool); from Python_check_mask import check_mask ; res = check_mask(db)" "res = check_mask(db)" 2>/dev/null || echo unsupported
printf "multiple_sum Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; r = np.random.rand(100,100); from Python_multiple_sum import multiple_sum ; res = multiple_sum(r)" "res = multiple_sum(r)" 2>/dev/null || echo unsupported
printf "evolve Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; grid_shape = (512, 512) ; grid = np.zeros(grid_shape) ; block_low = int(grid_shape[0] * .4) ; block_high = int(grid_shape[0] * .5) ; grid[block_low:block_high, block_low:block_high] = 0.005; from Python_evolve import evolve ; res = evolve(grid, 0.1)" "res = evolve(grid, 0.1)" 2>/dev/null || echo unsupported
printf "wave Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "N=4000; from Python_wave import wave ; res = wave(N)" "res = wave(N)" 2>/dev/null || echo unsupported
printf "laplacien Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; N = 500 ; X = np.random.randn(N,N,3); from Python_laplacien import laplacien ; res = laplacien(X)" "res = laplacien(X)" 2>/dev/null || echo unsupported
printf "rosen Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np; r = np.arange(1000000, dtype=float); from Python_rosen import rosen ; res = rosen(r)" "res = rosen(r)" 2>/dev/null || echo unsupported
printf "lstsqr Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; N = 500000 ; X, Y = np.random.rand(N), np.random.rand(N); from Python_lstsqr import lstsqr ; res = lstsqr(X, Y)" "res = lstsqr(X, Y)" 2>/dev/null || echo unsupported
printf "slowparts Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ;d = 10 ;re = 5 ;params = (d, re, np.ones((2*d, d+1, re)), np.ones((d, d+1, re)),  np.ones((d, 2*d)), np.ones((d, 2*d)), np.ones((d+1, re, d)), np.ones((d+1, re, d)), 1); from Python_slowparts import slowparts ; res = slowparts(*params)" "res = slowparts(*params)" 2>/dev/null || echo unsupported
printf "grayscott Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "pass; from Python_grayscott import grayscott ; res = grayscott(40, 0.16, 0.08, 0.04, 0.06)" "res = grayscott(40, 0.16, 0.08, 0.04, 0.06)" 2>/dev/null || echo unsupported
printf "grouping Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; N = 500000 ; np.random.seed(0); values = np.array(np.random.randint(0,3298,size=N),dtype='u4') ; values.sort(); from Python_grouping import grouping ; res = grouping(values)" "res = grouping(values)" 2>/dev/null || echo unsupported
printf "periodic_dist Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; N = 20 ; x = y = z = np.arange(0., N, 0.1) ; L = 4 ; periodic = True; from Python_periodic_dist import periodic_dist ; res = periodic_dist(x, x, x, L,periodic, periodic, periodic)" "res = periodic_dist(x, x, x, L,periodic, periodic, periodic)" 2>/dev/null || echo unsupported
printf "wdist Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; N = 70 ; A = np.random.rand(N,N) ; B =  np.random.rand(N,N) ; W = np.random.rand(N,N); from Python_wdist import wdist ; res = wdist(A,B,W)" "res = wdist(A,B,W)" 2>/dev/null || echo unsupported
printf "normalize_complex_arr Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np; np.random.seed(0); N = 10000; x = np.random.random(N) + 1j *  np.random.random(N); from Python_normalize_complex_arr import normalize_complex_arr ; res = normalize_complex_arr(x)" "res = normalize_complex_arr(x)" 2>/dev/null || echo unsupported
printf "l1norm Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; N = 80; x = np.random.rand(N,N); y = np.random.rand(N,N); from Python_l1norm import l1norm ; res = l1norm(x, y)" "res = l1norm(x, y)" 2>/dev/null || echo unsupported
printf "cronbach Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; np.random.seed(0); N = 600 ; items = np.random.rand(N,N); from Python_cronbach import cronbach ; res = cronbach(items)" "res = cronbach(items)" 2>/dev/null || echo unsupported
printf "harris Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; M, N = 512, 512 ; I = np.random.randn(M,N); from Python_harris import harris ; res = harris(I)" "res = harris(I)" 2>/dev/null || echo unsupported
printf "vibr_energy Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; N = 100000 ; a, b, c = np.random.rand(N), np.random.rand(N), np.random.rand(N); from Python_vibr_energy import vibr_energy ; res = vibr_energy(a, b, c)" "res = vibr_energy(a, b, c)" 2>/dev/null || echo unsupported
printf "diffusion Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np;lx,ly=(2**7,2**7);u=np.zeros([lx,ly],dtype=np.double);u[lx//2,ly//2]=1000.0;tempU=np.zeros([lx,ly],dtype=np.double); from Python_diffusion import diffusion ; res = diffusion(u,tempU,100)" "res = diffusion(u,tempU,100)" 2>/dev/null || echo unsupported
printf "arc_distance Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "N = 10000 ; import numpy as np ; np.random.seed(0); t0, p0, t1, p1 = np.random.randn(N), np.random.randn(N), np.random.randn(N), np.random.randn(N); from Python_arc_distance import arc_distance ; res = arc_distance(t0, p0, t1, p1)" "res = arc_distance(t0, p0, t1, p1)" 2>/dev/null || echo unsupported
printf "euclidean_distance_square Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np; np.random.seed(0); x1 = np.random.random((1, 512)); x2 = np.random.random((10000, 512)); from Python_euclidean_distance_square import euclidean_distance_square ; res = euclidean_distance_square(x1, x2)" "res = euclidean_distance_square(x1, x2)" 2>/dev/null || echo unsupported
printf "create_grid Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; N = 800 ; x = np.arange(0,1,1./N); from Python_create_grid import create_grid ; res = create_grid(x)" "res = create_grid(x)" 2>/dev/null || echo unsupported
printf "make_decision Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np, random; np.random.seed(0); s=np.random.randn(2**16)+np.random.randn(2**16)*1.j ; sc=np.random.choice(s, 32); from Python_make_decision import make_decision ; res = make_decision(s, sc)" "res = make_decision(s, sc)" 2>/dev/null || echo unsupported
printf "hasting Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; y = np.random.rand(3) ; args = np.random.rand(7); from Python_hasting import hasting ; res = hasting(y, *args)" "res = hasting(y, *args)" 2>/dev/null || echo unsupported
printf "repeating Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; a = np.random.rand(10000); from Python_repeating import repeating ; res = repeating(a, 20)" "res = repeating(a, 20)" 2>/dev/null || echo unsupported
printf "log_likelihood Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; N = 100000 ; a = np.random.random(N); b = 0.1; c =1.1; from Python_log_likelihood import log_likelihood ; res = log_likelihood(a, b, c)" "res = log_likelihood(a, b, c)" 2>/dev/null || echo unsupported
printf "reverse_cumsum Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; r = np.random.rand(1000000); from Python_reverse_cumsum import reverse_cumsum ; res = reverse_cumsum(r)" "res = reverse_cumsum(r)" 2>/dev/null || echo unsupported
printf "pairwise Python " && PYTHONPATH=..:$PYTHONPATH python3 -m benchit -r 11 -n 40 -s "import numpy as np ; X = np.linspace(0,10,20000).reshape(200,100); from Python_pairwise import pairwise ; res = pairwise(X)" "res = pairwise(X)" 2>/dev/null || echo unsupported